#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "qlib.h"

queue_td queue[LMAX] = {0};

static int fd = -1;
static int libinit  = 0;

#define massert(ft, lineno, q)                       \
  if (!ft) {                                         \
      printf(" assert failed at Line %d\n ", lineno);  \
  }	

int
lib_init (ds_type type, queue_td **q)
{
   int rv = 0;

   if (!q) return rv;

   switch (type) {
   case QUEUE:
   case STACK:
       if (!libinit) {
	   fd++;
	   libinit |= (type == STACK) ? STACK : QUEUE;
	   *q = &queue[fd];
           rv = 1;	
	   printf("libinit %d q %p %p rv %d Q %d\n", libinit, q, &queue[fd], rv, QUEUE);
       } else {
	   rv = 0;
       }
       break; 
   default:
      break;
   }
  return rv; 
}

static int
verify_lib (ds_type type) 
{

   if (libinit == (STACK|QUEUE)) {
       massert(0, __LINE__, 0);
       return 0;
   }

   switch (type) {
   case STACK:
   case QUEUE:
       if (libinit & type) {
	 return 1;
       }
   default:
     break;
   }
   return 0;
}


	void
qpush (int fd, void *ptr)
{
	qelem_td *qelem, *old_elem;

	if (!ptr) return;

	if (!verify_lib(QUEUE)) {
	    massert(0, __LINE__, 0);
	    return; 	
	}

	qelem = (qelem_td *)calloc(1, sizeof(qelem_td));
	qelem->ptr = ptr;
	old_elem = queue.head;
	queue.head = qelem;
	qelem->next = old_elem;
	if (old_elem) {
	    old_elem->prev = qelem;
	}
	queue.total++;

	if (queue.total == 1) {	
	    queue.tail = qelem;
	} else {
	}
	return; 	
}

qelem_td *
qhead ()
{
    return queue.head;
}

void *
qpop ()
{
   void *ptr;
   qelem_td *qelem, *old_elem, *prev;

   if (!verify_lib(QUEUE)) {
       massert(0, __LINE__, 1);
       return NULL;
   }

   if (!queue.total) {
       massert(queue.tail == queue.head, __LINE__, 1);	
       massert(queue.tail == NULL, __LINE__, 1);	
       return NULL;
   }

   if (!queue.head) {
       massert(queue.tail == NULL, __LINE__, 1);	
       return NULL;
   }

   if (!queue.tail) {
       printf("Fatal error queue head %p queue tail is NULL\n", queue.head);
       return NULL;	
   }

   if (queue.total == 1) {
       massert(queue.head == queue.tail, __LINE__, 1);
       queue.total--;
       qelem = queue.head;
       queue.head = queue.tail = NULL;
       ptr = qelem->ptr;
       free(qelem);
       return ptr;	
   }

   qelem = queue.tail;
   ptr = qelem->ptr;
   qelem->ptr = NULL;
   queue.total--;
   
   prev = qelem->prev;
   if (prev) {
       prev->next = qelem->next;
       queue.tail = prev;
   } else {
       massert(queue.head == queue.tail, __LINE__, 1);
       massert(queue.total == 0, __LINE__, 1);
       queue.head = queue.tail = NULL;
   }

   free(qelem);
   massert(queue.total > 0, queue.total, 1);
  
   return ptr;
}

void
spush ( void *ptr)
{
   qelem_td *old_elem = NULL, *qelem;

   if (!verify_lib(STACK)) {
       massert(0, __LINE__, 0);
       return;
   }
   
   qelem = (qelem_td *)calloc(1, sizeof(qelem_td));
   qelem->ptr = ptr;
   queue.total++;
   old_elem = queue.head; 
   if (old_elem) {
       qelem->next = old_elem;
   }
   queue.head = qelem; 		
}

void *
spop () 
{
	qelem_td *qelem;
	void *ptr;

	if (!queue.total) return NULL;

	qelem = queue.head;
	if (!qelem) {
		massert(0, __LINE__, 0);
		return NULL;
	}

	queue.total--;
	queue.head = qelem->next;
	ptr = qelem->ptr;
	free(qelem);
	return ptr;
}

#if 0
   qelem = queue.tail;
   ptr = qelem->ptr;
   qelem->ptr = NULL;
   queue.total--;
   
   prev = qelem->prev;
   if (prev) {
       prev->next = qelem->next;
       queue.tail = prev;
   } else {
       massert(queue.head == queue.tail, __LINE__);
       massert(queue.total == 0, __LINE__);
       qeueue.head = queue.tail = NULL;
   }

   free(qelem);
   massert(queue.total >=0, __LINE__);
   
   return ptr; 	
#endif
       

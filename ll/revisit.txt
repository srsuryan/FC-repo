
LL
==

1) reverse quite all/k nodes.
    for k nodes, use a seperate api to swap just within k nodes, return first node.
2) merge two sorted ll
    use new start and keep adding to that one. much much easier
3) http://www.geeksforgeeks.org/point-to-next-higher-value-node-in-a-linked-list-with-an-arbitrary-pointer/

4) mergesort
        fast and slow ptr ************ FAST and SLOW PTR *********
        split and merge
        mergesort_ll2 -> loop through by divide and conquer method
5) detect loop -> fast and slow ptr

6) Conv ll to tree, use Fast and Slow ptr, walk and construct -> convlltotree.c
